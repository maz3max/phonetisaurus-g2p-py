name: Build Wheels

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            arch: x86_64
          - os: ubuntu-24.04
            arch: aarch64
          - os: windows-2022
            arch: AMD64
          - os: macos-14
            arch: x86_64
          - os: macos-14
            arch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      if: matrix.arch == 'aarch64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel==2.16.2

    - name: Build wheels
      run: python -m cibuildwheel --output-dir wheelhouse
      env:
        # Configure cibuildwheel to build wheels for Python 3.9-3.12
        CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
        
        # Skip 32-bit builds and musl builds (adjust as needed)
        CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_*"
        
        # Use build (which will use maturin via pyproject.toml)
        CIBW_BUILD_FRONTEND: "build"
        
        # Install build dependencies
        CIBW_BEFORE_BUILD: "pip install maturin && rustup target add x86_64-apple-darwin aarch64-apple-darwin x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu x86_64-pc-windows-msvc || true"
        
        # Test the built wheels
        CIBW_TEST_REQUIRES: pytest
        CIBW_TEST_COMMAND: "python -c \"import phonetisaurus_g2p_py; print('Import successful')\""
        
        # Platform-specific configurations
        CIBW_ARCHS: ${{ matrix.arch }}

    - uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.arch }}
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install build dependencies
      run: python -m pip install build maturin

    - name: Build sdist
      run: python -m build --sdist

    - uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-24.04
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: wheels-ubuntu-24.04-x86_64
        path: dist

    - uses: actions/download-artifact@v4
      with:
        name: wheels-ubuntu-24.04-aarch64
        path: dist

    - uses: actions/download-artifact@v4
      with:
        name: wheels-windows-2022-AMD64
        path: dist

    - uses: actions/download-artifact@v4
      with:
        name: wheels-macos-14-x86_64
        path: dist

    - uses: actions/download-artifact@v4
      with:
        name: wheels-macos-14-arm64
        path: dist

    - uses: actions/download-artifact@v4
      with:
        name: sdist
        path: dist

#    - name: Publish to PyPI
#      uses: pypa/gh-action-pypi-publish@release/v1
#      with:
#        password: ${{ secrets.PYPI_API_TOKEN }}
